local isDebug = true

shell.run('launcher.lua', tostring(isDebug)) -- check for updates


local oldfs = fs
local __GRUB_START_TIME = nil -- Initialized just before the main loop/timer are run
local __GRUB_COUNTDOWN_TIME = 16
local __GRUB_TIME_LEFT = __GRUB_COUNTDOWN_TIME
local __GRUB_RUN_TIME = nil -- calculated as os.clock - __GRUB_START_TIME

function loadAPI(path) -- Thanks to theoriginalbit for this loadAPI replacer
  local name = string.match(fs.getName(path), '(%a+)%.?.-')
  local env = setmetatable({shell = shell}, { __index = _G }) -- passes a ref of the shell api to the loaded api
  local func, err = loadfile(path)
  if not func then
    return false, printError(err)
  end
  setfenv(func, env)
  func()
  local api = {}
  for k,v in pairs(env) do
    api[k] = v
  end
  _G[name] = api
  return true
end

-- init
local __tempPEStorage = os.pullEvent
os.pullEvent = os.pullEventRaw -- Prevent ctrl-T
local h, w = term.getSize()
loadAPI(shell.dir()..'lgrub.sys/splash.lua') -- splash text
loadAPI(shell.dir()..'lgrub.sys/api/lgrub.lua') -- an interface that allows OSes to list other OSes by name, and also what we use here.
loadAPI(shell.dir()..'lgrub.sys/api/Drawing.lua') -- Oeed's drawing API
if isDebug then
  shell.run(shell.dir()..'lgrub.sys/api/wrappedFS.lua') -- forces relative paths (hopefully)
  fs = wrappedFS -- Replace the standard fs with wrappedFS
end
lgrub.init(shell)
Drawing.Clear()
Drawing.DrawArea(1, 1, Drawing.Screen.Width, 2, ' ', colors.lightGray, colors.lightGray) -- version + splash bg
Drawing.DrawCharactersCenter(1, 1, nil, 1, 'LuaGrub v'..lgrub.version, colors.black, colors.lightGray) -- write version to buffer
Drawing.DrawCharactersCenter(1, 2, nil, 1, splash.text, colors.black, colors.lightGray) -- write splash to buffer
Drawing.DrawBuffer() -- paint buffer to screen

-- event spam; necessary to keep timer working
function grub_evnt()
  while true do
    if __GRUB_TIME_LEFT == 'infinity' then
      coroutine.yield()
    else
      os.queueEvent('GRUBNULLEVENT')
      sleep(.25)
    end
  end
end

-- timer
local function grub_countdown(e)
  if __GRUB_TIME_LEFT == 'infinity' then return end
  __GRUB_RUN_TIME = os.clock() - __GRUB_START_TIME
  if e == 'key' then
    __GRUB_TIME_LEFT = 'infinity'
  else
  	__GRUB_TIME_LEFT = math.floor(__GRUB_COUNTDOWN_TIME - __GRUB_RUN_TIME)
  end
end

-- main loop
local function grub_selector()
  local tOS = lgrub.listOSes()
  local nTermX, nTermY = term.getSize()
  local sSeparator = (' '):rep(nTermX) -- Create a separator string with the size of the terminal
  local continue = true
  local nSelection = 1 -- The current selection defaults at 1
  __GRUB_START_TIME = os.clock()
  grub_countdown('sleep')
  while continue do
    local timerTip = '; any key cancels timer'
    if __GRUB_TIME_LEFT == 'infinity' then
      timerTip = ''
    end
    Drawing.DrawArea(1, 1, Drawing.Screen.Width, 2, ' ', colors.lightGray, colors.lightGray) -- version + splash bg
    Drawing.DrawCharactersCenter(1, 1, nil, 1, 'LuaGRUB v'..lgrub.version, colors.black, colors.lightGray) -- write version to buffer
    Drawing.DrawCharactersCenter(1, 2, nil, 1, splash.text, colors.black, colors.lightGray) -- write splash to buffer
    Drawing.DrawArea(1, Drawing.Screen.Height, Drawing.Screen.Width, 1, ' ', colors.lightGray, colors.lightGray) -- time left bg
    Drawing.DrawCharactersCenter(1, Drawing.Screen.Height, nil, 1, __GRUB_TIME_LEFT..' seconds left to decide'..timerTip, colors.black, colors.lightGray) -- write time left to buffer
    for nLine = 1, #tOS do
      local sLine = ' '
      local fgColor = colors.white
      if nSelection == nLine then
        sLine = '>'
        fgColor = colors.yellow
      end
      sLine = sLine..tOS[nLine][1]
      Drawing.WriteStringToBuffer(2, nLine + 2, sLine, fgColor, colors.black) -- write OS name to buffer
    end
    Drawing.DrawBuffer() -- paint buffer to screen
    local sEvent, nKey = __tempPEStorage()
    if sEvent == 'key' then
      grub_countdown('key')
      if nKey == 200 or nKey == 17 then
        if tOS[nSelection - 1] then
          nSelection = nSelection - 1
        else
          nSelection = #tOS
        end
      elseif nKey == 208 or nKey == 31  then
        if tOS[nSelection + 1] then
          nSelection = nSelection + 1
        else
          nSelection = 1
        end
      elseif nKey == 28 then
        if tOS[nSelection][2] then
          continue = false
        else
          error('Error: Selection out of bounds: '..nSelection..'/'..#tOS)
          nSelection = 1
        end
      end
    else
      grub_countdown('sleep')
    end
    if __GRUB_TIME_LEFT == 0 then
      lgrub.prepForRun(tOS[nSelection][2])
      return
    end
  end
  lgrub.prepForRun(tOS[nSelection][2])
end

-- exec timer/main loop

parallel.waitForAny(grub_selector, grub_evnt) -- Wait up to fifteen seconds for user input, or use the first OS in the list
local __osPath = lgrub.getPrepped()

-- exec OS
local __continue = true
while __continue do
  __continue = false -- default is to shutdown after os ends, if they haven't already
  if __osPath == 'CraftOS' then -- enable CraftOS support; not a boot option, must be enabled by OS
    term.clear()
    Drawing.WriteStringToBuffer(1, 1, os.version(), colors.yellow, colors.black)
    Drawing.DrawBuffer()
    term.setCursorPos(1,2)
    term.setTextColor(colors.white)
    term.setBackgroundColor(colors.black)
    return -- end now, but without shutdown
  end
  if __osPath == 'Shutdown' then -- force immediate power down
    os.shutdown()
  end
  os.pullEvent = __tempPEStorage -- Restore os.pullEvent to prevent possible conflicts
  lgrub.run(__osPath..'/startup')
  os.pullEvent = os.pullEventRaw -- Prevent ctrl-t again
  if lgrub.goAgain() then
    __osPath = lgrub.getNewOS()
    __continue = true
    lgrub.done()
  end
end
if isDebug then
  print("TextColor")
  printError("End Of OS Code")
  sleep(5)
end
-- power down
os.shutdown() -- This is always skipped for CraftOS, and usually won't be run ever, unless the OS forgets to power down. This helps prevent hacking/mistakes.
